generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String    @id @default(uuid())
  username String    @unique
  email    String    @unique
  password String
  pokemons Pokemon[]
  tradesSent Trade[] @relation("SentTrades")
  tradesReceived Trade[] @relation("ReceivedTrades")
  transactionsSent Transaction[] @relation("SentTransactions")
  transactionsReceived Transaction[] @relation("ReceivedTransactions")
  portfolio Portfolio?
  wishlist  Wishlist?
  createdAt DateTime @default(now())
}

model Pokemon {
  id        String  @id @default(uuid())
  name      String
  type      String
  level     Int     @default(1)
  ownerId   String
  owner     User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  portfolio Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: SetNull)
  wishlist  Wishlist?  @relation(fields: [wishlistId], references: [id], onDelete: SetNull)
  tradePokemons TradePokemon[]
  portfolioId String?
  wishlistId String?
  createdAt DateTime @default(now())
}

model Trade {
  id         String    @id @default(uuid())
  senderId   String
  receiverId String
  status     TradeStatus @default(PENDING)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  sender     User      @relation("SentTrades", fields: [senderId], references: [id])
  receiver   User      @relation("ReceivedTrades", fields: [receiverId], references: [id])
  tradePokemons TradePokemon[]
  transaction Transaction?
}

model TradePokemon {
  id         String  @id @default(uuid())
  tradeId    String
  pokemonId  String
  trade      Trade   @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  pokemon    Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

enum TradeStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Transaction {
  id         String    @id @default(uuid())
  tradeId    String    @unique
  senderId   String
  receiverId String
  amount     Float
  timestamp  DateTime  @default(now())
  trade      Trade     @relation(fields: [tradeId], references: [id])
  sender     User      @relation("SentTransactions", fields: [senderId], references: [id])
  receiver   User      @relation("ReceivedTransactions", fields: [receiverId], references: [id])
  portfolio  Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: SetNull)
  portfolioId String?
}

model Portfolio {
  id          String    @id @default(uuid())
  userId      String    @unique
  totalValue  Float     @default(0.0)
  pokemons    Pokemon[]
  transactions Transaction[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt   DateTime  @updatedAt
}

model Wishlist {
  id         String    @id @default(uuid())
  userId     String    @unique
  pokemons   Pokemon[]
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
}
