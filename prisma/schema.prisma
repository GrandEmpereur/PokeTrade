generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Type enum pour les conditions d'alerte
enum AlertCondition {
  ABOVE
  BELOW
  EQUAL
}

// Type enum pour les types d'ordre
enum OrderType {
  MARKET // Exécution immédiate au prix du marché
  LIMIT // Exécution à un prix spécifié ou meilleur
  STOP // Ordre déclenché quand le prix atteint un niveau spécifié
}

// Type enum pour les côtés d'un ordre
enum OrderSide {
  BUY
  SELL
}

// Type enum pour les statuts d'ordre
enum OrderStatus {
  OPEN
  FILLED
  CANCELLED
  EXPIRED
}

// Type enum pour les types de transactions
enum TransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAWAL
}

// Modèle pour le portefeuille d'un utilisateur
model Portfolio {
  id          String   @id @default(uuid())
  userId      String   @unique // ID Supabase de l'utilisateur
  totalValue  Float    @default(0.0)
  cashBalance Float    @default(1000.0) // Solde disponible pour les transactions
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  // Relations
  pokemons     Pokemon[]
  transactions Transaction[]

  @@index([userId])
}

// Modèle pour les Pokémon (actifs négociables)
model Pokemon {
  id           String   @id @default(uuid())
  pokemonApiId Int // ID du Pokémon dans l'API Pokémon
  name         String
  type         String[] // Types du Pokémon (eau, feu, etc.)
  ownerId      String? // ID Supabase du propriétaire (null si dans le marché général)
  portfolioId  String? // Portefeuille auquel le Pokémon appartient
  basePrice    Float    @default(0) // Prix de base
  currentPrice Float    @default(0) // Prix actuel
  marketCap    Float?   @default(0) // Capitalisation boursière
  volume24h    Float?   @default(0) // Volume d'échange sur 24h
  image        String? // URL de l'image
  rarity       String? // Rareté (commune, rare, légendaire, etc.)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  portfolio    Portfolio?     @relation(fields: [portfolioId], references: [id])
  priceHistory PriceHistory[]
  buyOrders    Order[]        @relation("BuyOrders")
  sellOrders   Order[]        @relation("SellOrders")
  alerts       Alert[]

  // Ajout d'un champ pour la quantité détenue
  quantity Int @default(1)

  @@index([ownerId])
  @@index([pokemonApiId])
  @@index([currentPrice])
}

// Modèle pour les alertes de prix
model Alert {
  id        String         @id @default(uuid())
  userId    String // ID Supabase de l'utilisateur
  pokemonId String
  condition AlertCondition
  price     Float
  triggered Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  pokemon Pokemon @relation(fields: [pokemonId], references: [id])

  @@index([userId])
  @@index([pokemonId])
}

// Modèle pour les statistiques du marché
model MarketStatistics {
  id              String   @id @default(uuid())
  date            DateTime @unique @default(now())
  totalVolume     Float    @default(0)
  totalMarketCap  Float    @default(0)
  topTraded       Json // Top des Pokémon les plus échangés
  priceIndex      Float    @default(1000) // Indice de prix du marché
  volumeChange24h Float? // Changement de volume sur 24h (%)

  @@index([date])
}

// Modèle pour les ordres d'achat/vente
model Order {
  id        String      @id @default(uuid())
  userId    String // ID Supabase de l'utilisateur
  pokemonId String
  type      OrderType
  side      OrderSide
  quantity  Int
  price     Float
  status    OrderStatus @default(OPEN)
  filledAt  DateTime?
  expiresAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations avec les Pokémon pour les ordres d'achat et de vente
  pokemonBuy  Pokemon? @relation("BuyOrders", fields: [pokemonId], references: [id], map: "Order_pokemonBuy_fkey")
  pokemonSell Pokemon? @relation("SellOrders", fields: [pokemonId], references: [id], map: "Order_pokemonSell_fkey")

  // Relations avec les transactions
  transactions Transaction[]

  @@index([userId])
  @@index([pokemonId])
  @@index([status])
  @@index([side])
}

// Modèle pour l'historique des prix
model PriceHistory {
  id        String   @id @default(uuid())
  pokemonId String
  price     Float
  volume    Float    @default(0)
  timestamp DateTime @default(now())

  // Relations
  pokemon Pokemon @relation(fields: [pokemonId], references: [id])

  @@index([pokemonId, timestamp])
}

// Modèle pour les transactions
model Transaction {
  id          String          @id @default(uuid())
  userId      String // ID Supabase de l'utilisateur
  type        TransactionType
  pokemonId   String? // Optionnel pour transactions en espèces
  orderId     String? // ID de l'ordre associé (si applicable)
  quantity    Int?
  price       Float
  amount      Float // Montant total de la transaction
  portfolioId String?
  timestamp   DateTime        @default(now())
  description String?

  // Relations
  portfolio Portfolio? @relation(fields: [portfolioId], references: [id])
  order     Order?     @relation(fields: [orderId], references: [id])

  @@index([userId])
  @@index([orderId])
  @@index([timestamp])
}
