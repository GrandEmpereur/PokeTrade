generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

///
/// ENUMS
///

enum AlertCondition {
  ABOVE
  BELOW
  EQUAL
}

enum OrderType {
  MARKET // Exécution immédiate au prix du marché
  LIMIT // Exécution à un prix défini ou meilleur
  STOP // Ordre déclenché au franchissement d’un seuil
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  OPEN
  FILLED
  CANCELLED
  EXPIRED
}

enum TransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAWAL
}

///
/// MODELS
///

model Portfolio {
  id          String   @id @default(uuid())
  userId      String   @unique // Identifiant de l’utilisateur (géré par Supabase Auth)
  totalValue  Float    @default(0.0)
  cashBalance Float    @default(1000.0) // Solde initial pour les transactions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pokemons     Pokemon[]
  transactions Transaction[]

  @@index([userId])
}

model Pokemon {
  id           String   @id @default(uuid())
  pokemonApiId Int // Identifiant dans l’API Pokémon
  name         String
  type         String[] // Liste des types (eau, feu, etc.)
  ownerId      String? // Propriétaire (null si disponible sur le marché)
  portfolioId  String? // Portefeuille auquel le Pokémon appartient (facultatif)
  basePrice    Float    @default(0)
  currentPrice Float    @default(0)
  marketCap    Float?   @default(0)
  volume24h    Float?   @default(0)
  image        String? // URL de l’image
  rarity       String? // Rareté (ex. commune, rare, légendaire)
  quantity     Int      @default(1) // Quantité détenue
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  portfolio    Portfolio?     @relation(fields: [portfolioId], references: [id], onDelete: SetNull)
  priceHistory PriceHistory[]
  buyOrders    Order[]        @relation("BuyOrders")
  sellOrders   Order[]        @relation("SellOrders")
  alerts       Alert[]

  @@index([ownerId])
  @@index([pokemonApiId])
  @@index([currentPrice])
}

model Alert {
  id        String         @id @default(uuid())
  userId    String // Identifiant de l’utilisateur (Supabase Auth)
  pokemonId String // Pokémon concerné par l’alerte
  condition AlertCondition // Condition d’activation
  price     Float // Seuil de prix
  triggered Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relation
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pokemonId])
}

model MarketStatistics {
  id              String   @id @default(uuid())
  date            DateTime @unique @default(now())
  totalVolume     Float    @default(0)
  totalMarketCap  Float    @default(0)
  topTraded       Json // Liste des Pokémon les plus échangés
  priceIndex      Float    @default(1000)
  volumeChange24h Float? // Variation du volume sur 24h en pourcentage

  @@index([date])
}

model Order {
  id        String      @id @default(uuid())
  userId    String // Identifiant de l’utilisateur (Supabase Auth)
  type      OrderType
  side      OrderSide
  quantity  Int
  price     Float
  status    OrderStatus @default(OPEN)
  filledAt  DateTime?
  expiresAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Champs pour différencier l’ordre d’achat et l’ordre de vente.
  // Seul l’un des deux sera renseigné suivant le côté de l’ordre.
  pokemonBuyId  String?
  pokemonSellId String?

  // Relations
  pokemonBuy  Pokemon? @relation("BuyOrders", fields: [pokemonBuyId], references: [id], onDelete: Cascade)
  pokemonSell Pokemon? @relation("SellOrders", fields: [pokemonSellId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  @@index([userId])
  @@index([pokemonBuyId])
  @@index([pokemonSellId])
  @@index([status])
  @@index([side])
}

model PriceHistory {
  id        String   @id @default(uuid())
  pokemonId String // Pokémon concerné
  price     Float
  volume    Float    @default(0)
  timestamp DateTime @default(now())

  // Relation
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@index([pokemonId, timestamp])
}

model Transaction {
  id          String          @id @default(uuid())
  userId      String // Identifiant de l’utilisateur (Supabase Auth)
  type        TransactionType
  pokemonId   String? // Le cas échéant, identifiant du Pokémon
  orderId     String? // Ordre associé (si applicable)
  quantity    Int?
  price       Float
  amount      Float // Montant total de la transaction
  portfolioId String? // Portefeuille concerné
  timestamp   DateTime        @default(now())
  description String? // Description optionnelle

  // Relations
  portfolio Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: SetNull)
  order     Order?     @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([orderId])
  @@index([timestamp])
}
